-- Copyright (c) 2018-2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

module BobTrigger where

-- import DA.Action
import DA.Foldable
import DA.Next.Map (Map)
import Daml.Trigger
import Main

rejectTrigger : Trigger () = Trigger with
  initialize = \_ -> ()
  updateState = \_ _ () -> ()
  rule = rejectRule
  registeredTemplates = AllInDar
  heartbeat = None

rejectRule : Party -> ACS -> Time -> Map CommandId [Command] -> () -> TriggerA ()
rejectRule p acs _ _ _ = do
  let assets = getContracts @Asset acs
  let bobAssets = filter (\(_,a) -> a.owner == p) assets
  let configs = getContracts @DonorConfig acs
  let Some (_,bobConfig) = find (\(_,c) -> c.owner == p) configs

  forA_ bobAssets $ \(_cid, c) -> do
    debug "Ran rejectRule"
    emitCommands [exerciseCmd _cid Give with newOwner = bobConfig.donateTo] [toAnyContractId _cid]

